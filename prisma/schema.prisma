generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Embed {
  /// @zod.optional()
  id                                       Int          @id @default(autoincrement())
  Sourceid                                 Int
  title                                    String?      @db.VarChar(256)
  description                              String?      @db.VarChar(4096)
  timestamp                                DateTime?
  timestampNow                             Boolean?
  thumbnail                                String?
  url                                      String?
  created                                  DateTime?    @default(now())
  updated                                  DateTime?    @default(now())
  color                                    String?
  Source_Embed_SourceidToSource            Source       @relation("Embed_SourceidToSource", fields: [Sourceid], references: [id], onDelete: Cascade)
  author                                   EmbedAuthor?
  fields                                   EmbedField[]
  footer                                   EmbedFooter?
  image                                    EmbedImage?
  Source_Source_activeCardToEmbedIdToEmbed Source?      @relation("Source_activeCardToEmbedIdToEmbed")
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model ImageCard {
  id                                    Int            @id @default(autoincrement())
  backgroundImgURL                      String?
  backgroundColor                       String?
  avatarBorderColor                     String?
  colorTextDefault                      String?
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime?      @updatedAt
  mainTextId                            Int?           @unique
  secondTextId                          Int?           @unique
  nicknameTextId                        Int?           @unique
  sourceId                              Int
  mainText                              ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id], onDelete: Cascade)
  nicknameText                          ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id], onDelete: Cascade)
  secondText                            ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id], onDelete: Cascade)
  Source_ImageCard_sourceIdToSource     Source         @relation("ImageCard_sourceIdToSource", fields: [sourceId], references: [id], onDelete: Cascade)
  Source_Source_activeCardIdToImageCard Source?        @relation("Source_activeCardIdToImageCard")
}

model ImageCardText {
  id           Int        @id @default(autoincrement())
  content      String
  color        String?
  font         String?
  size         Int?
  weight       String?
  mainCard     ImageCard? @relation("MainTextRelation")
  nicknameCard ImageCard? @relation("NicknameRelation")
  secondCard   ImageCard? @relation("SecondTextRelation")
}

model User {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  username  String?
  Session   Session[]
}

model GuildStats {
  id                Int        @default(autoincrement())
  period            Period
  source            SourceType
  generatedImages   Int        @default(0)
  generatedEmbeds   Int        @default(0)
  generatedMessages Int        @default(0)
  membersEvent      Int        @default(0)
  guildId           String?
  createdAt         DateTime   @default(now())
  Guild             Guild?     @relation(fields: [guildId], references: [id])

  @@id([id, period, source, createdAt])
}

model betaGuild {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  Guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Session {
  id          String    @id
  accessToken String
  expiresAt   DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  userId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Guild {
  id           String        @id
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?
  GuildStats   GuildStats[]
  Source       Source[]
  betaGuild    betaGuild?
  premiumGuild premiumGuild?
}

model Source {
  id                                       Int         @id @unique @default(autoincrement())
  guildId                                  String
  type                                     SourceType
  channelId                                String?
  content                                  String?
  createdAt                                DateTime?   @default(now())
  updatedAt                                DateTime?
  activeCardId                             Int?        @unique
  activeCardToEmbedId                      Int?        @unique
  Embed_Embed_SourceidToSource             Embed[]     @relation("Embed_SourceidToSource")
  ImageCard_ImageCard_sourceIdToSource     ImageCard[] @relation("ImageCard_sourceIdToSource")
  Guild                                    Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade, map: "Source_ActiveSources_guildId_fkey")
  ImageCard_Source_activeCardIdToImageCard ImageCard?  @relation("Source_activeCardIdToImageCard", fields: [activeCardId], references: [id], onDelete: Cascade)
  Embed_Source_activeCardToEmbedIdToEmbed  Embed?      @relation("Source_activeCardToEmbedIdToEmbed", fields: [activeCardToEmbedId], references: [id], onDelete: Cascade)
}

model premiumGuild {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  Guild     Guild     @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}

enum SourceType {
  Welcomer
  Leaver
  DM
}
