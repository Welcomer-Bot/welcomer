generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id        String    @id @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  leaver    Leaver?
  welcomer  Welcomer?
}

model Welcomer {
  /// @zod.optional()
  id                                         Int         @id @default(autoincrement())
  guildId                                    String?     @unique
  channelId                                  String?
  content                                    String?
  createdAt                                  DateTime?   @default(now())
  updatedAt                                  DateTime?   @updatedAt
  activeCardId                               Int?        @unique
  DM                                         DM?
  embeds                                     Embed[]
  images                                     ImageCard[] @relation("WelcomerImagesRelation")
  ImageCard_Welcomer_activeCardIdToImageCard ImageCard?  @relation("Welcomer_activeCardIdToImageCard", fields: [activeCardId], references: [id])
  guild                                      Guild?      @relation(fields: [guildId], references: [id])
}

model Leaver {
  /// @zod.optional()
  id                                       Int         @id @default(autoincrement())
  guildId                                  String?     @unique
  channelId                                String?
  content                                  String?
  createdAt                                DateTime?   @default(now())
  updatedAt                                DateTime?   @updatedAt
  activeCardId                             Int?        @unique
  embeds                                   Embed[]
  images                                   ImageCard[] @relation("LeaverImagesRelation")
  ImageCard_Leaver_activeCardIdToImageCard ImageCard?  @relation("Leaver_activeCardIdToImageCard", fields: [activeCardId], references: [id])
  guild                                    Guild?      @relation(fields: [guildId], references: [id])
}

model DM {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  moduleId  Int       @unique
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  module    Welcomer  @relation(fields: [moduleId], references: [id])
  embeds    Embed[]
}

model Embed {
  /// @zod.optional()
  id           Int          @id @default(autoincrement())
  title        String?      @db.VarChar(256)
  description  String?      @db.VarChar(4096)
  timestamp    DateTime?
  timestampNow Boolean?
  thumbnail    String?
  url          String?
  created      DateTime?    @default(now())
  updated      DateTime?    @default(now())
  welcomerId   Int?
  leaverId     Int?
  DMId         Int?
  color        String?
  DM           DM?          @relation(fields: [DMId], references: [id])
  leaver       Leaver?      @relation(fields: [leaverId], references: [id])
  welcomer     Welcomer?    @relation(fields: [welcomerId], references: [id])
  author       EmbedAuthor?
  fields       EmbedField[]
  footer       EmbedFooter?
  image        EmbedImage?
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model ImageCard {
  id                                        Int            @id @default(autoincrement())
  backgroundUrl                             String?
  backgroundColor                           String?
  avatarBorderColor                         String?
  textColor                                 String?
  createdAt                                 DateTime       @default(now())
  updatedAt                                 DateTime?      @updatedAt
  welcomerId                                Int?
  leaverId                                  Int?
  mainTextId                                Int?           @unique
  secondTextId                              Int?           @unique
  nicknameTextId                            Int?           @unique
  leaver                                    Leaver?        @relation("LeaverImagesRelation", fields: [leaverId], references: [id], map: "ImageCard_leaverId_fkey")
  mainText                                  ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id])
  nicknameText                              ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id])
  secondText                                ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id])
  welcomer                                  Welcomer?      @relation("WelcomerImagesRelation", fields: [welcomerId], references: [id], map: "ImageCard_welcomerId_fkey")
  Leaver_Leaver_activeCardIdToImageCard     Leaver?        @relation("Leaver_activeCardIdToImageCard")
  Welcomer_Welcomer_activeCardIdToImageCard Welcomer?      @relation("Welcomer_activeCardIdToImageCard")
}

model ImageCardText {
  id           Int        @id @default(autoincrement())
  content      String
  color        String?
  font         String?
  size         Int?
  weight       String?
  mainCard     ImageCard? @relation("MainTextRelation")
  nicknameCard ImageCard? @relation("NicknameRelation")
  secondCard   ImageCard? @relation("SecondTextRelation")
}

model User {
  id            String      @id
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  UserGuild     UserGuild[]
}

model UserGuild {
  id          String     @id
  name        String
  icon        String?
  banner      String?
  permissions String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  channels    Channels[]
  User        User[]
}

model Channels {
  id        String     @id
  type      String
  name      String
  guildId   String?
  channelId String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  guild     UserGuild? @relation(fields: [guildId], references: [id])
}
