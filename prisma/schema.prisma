// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id        String    @id @unique
  welcomer  Welcomer?
  leaver    Leaver?
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model Welcomer {
  id        Int      @unique @default(autoincrement()) /// @zod.optional()
  guildId   String   @unique
  guild     Guild?   @relation(fields: [guildId], references: [id])
  channelId String
  content   String
  embeds    Embed[] /// @zod.max(10)
  DM        DM?
  created   DateTime? @default(now())
  updated   DateTime? @default(now())
}

model Leaver {
  id        Int      @unique @default(autoincrement()) /// @zod.optional()
  guildId   String   @unique
  guild     Guild    @relation(fields: [guildId], references: [id])
  channelId String
  content   String
  embeds    Embed[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model DM {
  id        Int      @unique @default(autoincrement())
  moduleId  Int      @unique
  module    Welcomer @relation(fields: [moduleId], references: [id])
  message   String
  embeds    Embed[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
 
model Embed {
  id           Int          @id @default(autoincrement()) /// @zod.optional()
  title        String?      @db.VarChar(256) 
  description  String?      @db.VarChar(4096)
  color        String?
  timestamp    DateTime?
  timestampNow Boolean?
  footer       EmbedFooter?
  fields       EmbedField[]
  author       EmbedAuthor?
  image        EmbedImage?
  thumbnail    String?
  url          String?
  created      DateTime?     @default(now()) /// @zod.optional()
  updated      DateTime?     @default(now()) /// @zod.optional()

  // relations
  welcomerId Int?
  welcomer   Welcomer? @relation(fields: [welcomerId], references: [id])
  leaverId   Int?
  leaver     Leaver?   @relation(fields: [leaverId], references: [id])
  DMId       Int?
  DM         DM?       @relation(fields: [DMId], references: [id])
}

model EmbedImage {
  id        Int      @id @default(autoincrement())
  embedId   Int      @unique
  embed     Embed    @relation(fields: [embedId], references: [id])
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model EmbedAuthor {
  id        Int      @id @default(autoincrement())/// @zod.optional()
  embedId   Int?      @unique/// @zod.optional()
  embed     Embed?    @relation(fields: [embedId], references: [id])/// @zod.optional()
  name      String?
  iconUrl   String?
  url       String? @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model EmbedField {
  id        Int      @id @default(autoincrement())/// @zod.optional()
  embedId   Int?      @unique/// @zod.optional()
  embed     Embed?    @relation(fields: [embedId], references: [id])/// @zod.optional()
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model EmbedFooter {
  id        Int      @id @default(autoincrement())/// @zod.optional()
  embedId   Int?      @unique /// @zod.optional()
  embed     Embed?    @relation(fields: [embedId], references: [id]) /// @zod.optional()
  text      String?   @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())/// @zod.optional()
  updatedAt DateTime? @updatedAt/// @zod.optional()
}

model User {
  id            String      @id
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
  guilds        UserGuild[]
}

model UserGuild {
  id          String     @id
  name        String
  icon        String?
  banner      String?
  permissions String?
  channels    Channels[]
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Channels {
  id        String    @id
  type      String
  name      String
  guildId   String
  guild     UserGuild @relation(fields: [guildId], references: [id])
  channelId String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

generator zod {
  provider = "zod-prisma"
  output   = "./schema" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}