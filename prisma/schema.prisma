generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./schema"
  relationModel         = "true"
  modelSuffix           = "Model"
  useDecimalJs          = "true"
  prismaJsonNullability = "true"
  modelCase             = "PascalCase"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id        String    @id @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  leaver    Leaver?
  welcomer  Welcomer?
}

model Welcomer {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  guildId   String    @unique
  channelId String?
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt 
  DM        DM?
  embeds    Embed[]
  guild     Guild?     @relation(fields: [guildId], references: [id])
}

model Leaver {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  guildId   String    @unique
  channelId String?
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embeds    Embed[]
  guild     Guild?     @relation(fields: [guildId], references: [id])
}

model DM {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  moduleId  Int       @unique
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  module    Welcomer  @relation(fields: [moduleId], references: [id])
  embeds    Embed[]
}

model Embed {
  id           Int          @id @default(autoincrement())  /// @zod.optional()
  title        String?      @db.VarChar(256)
  description  String?      @db.VarChar(4096)
  color        String?
  timestamp    DateTime?
  timestampNow Boolean?
  thumbnail    String?
  url          String?
  created      DateTime?    @default(now())
  updated      DateTime?    @default(now())
  welcomerId   Int?
  leaverId     Int?
  DMId         Int?
  DM           DM?          @relation(fields: [DMId], references: [id])
  leaver       Leaver?      @relation(fields: [leaverId], references: [id])
  welcomer     Welcomer?    @relation(fields: [welcomerId], references: [id])
  author       EmbedAuthor?
  fields       EmbedField[]
  footer       EmbedFooter?
  image        EmbedImage?
}

model EmbedImage {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  embedId   Int       @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?     @relation(fields: [embedId], references: [id])
}

model EmbedAuthor {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  embedId   Int?      @unique
  name      String?
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedField {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  embedId   Int?      @unique
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model EmbedFooter {
  id        Int       @id @default(autoincrement())  /// @zod.optional()
  embedId   Int?      @unique
  text      String?   @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id])
}

model User {
  id            String      @id
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  guilds        UserGuild[]
}

model UserGuild {
  id          String     @id
  name        String
  icon        String?
  banner      String?
  permissions String?
  userId      String
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  channels    Channels[]
  user        User       @relation(fields: [userId], references: [id])
}

model Channels {
  id        String    @id
  type      String
  name      String
  guildId   String
  channelId String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  guild     UserGuild @relation(fields: [guildId], references: [id])
}
