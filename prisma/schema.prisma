generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Welcomer {
  guildId                                    String      @id
  channelId                                  String?
  content                                    String?
  createdAt                                  DateTime?   @default(now())
  updatedAt                                  DateTime?   @updatedAt
  activeCardId                               Int?        @unique
  activeCardToEmbedId                        Int?        @unique
  DM                                         DM?
  embeds                                     Embed[]
  images                                     ImageCard[] @relation("WelcomerImagesRelation")
  ImageCard_Welcomer_activeCardIdToImageCard ImageCard?  @relation("Welcomer_activeCardIdToImageCard", fields: [activeCardId], references: [id], onDelete: Cascade)
  Embed_Welcomer_activeCardToEmbedIdToEmbed  Embed?      @relation("Welcomer_activeCardToEmbedIdToEmbed", fields: [activeCardToEmbedId], references: [id], onDelete: Cascade)
}

model Leaver {
  guildId                                  String      @id
  channelId                                String?
  content                                  String?
  createdAt                                DateTime?   @default(now())
  updatedAt                                DateTime?   @updatedAt
  activeCardToEmbedId                      Int?        @unique
  activeCardId                             Int?        @unique
  embeds                                   Embed[]
  images                                   ImageCard[] @relation("LeaverImagesRelation")
  ImageCard_Leaver_activeCardIdToImageCard ImageCard?  @relation("Leaver_activeCardIdToImageCard", fields: [activeCardId], references: [id], onDelete: Cascade)
  Embed_Leaver_activeCardToEmbedIdToEmbed  Embed?      @relation("Leaver_activeCardToEmbedIdToEmbed", fields: [activeCardToEmbedId], references: [id], onDelete: Cascade)
}

model DM {
  /// @zod.optional()
  id        String    @id
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Welcomer  Welcomer  @relation(fields: [id], references: [guildId], onDelete: Cascade)
  embeds    Embed?
}

model Embed {
  /// @zod.optional()
  id                                           Int          @id @default(autoincrement())
  title                                        String?      @db.VarChar(256)
  description                                  String?      @db.VarChar(4096)
  timestamp                                    DateTime?
  timestampNow                                 Boolean?
  thumbnail                                    String?
  url                                          String?
  created                                      DateTime?    @default(now())
  updated                                      DateTime?    @default(now())
  welcomerId                                   String?
  leaverId                                     String?
  DMId                                         String?      @unique
  color                                        String?
  DM                                           DM?          @relation(fields: [DMId], references: [id], onDelete: Cascade)
  leaver                                       Leaver?      @relation(fields: [leaverId], references: [guildId], onDelete: Cascade)
  welcomer                                     Welcomer?    @relation(fields: [welcomerId], references: [guildId], onDelete: Cascade)
  author                                       EmbedAuthor?
  fields                                       EmbedField[]
  footer                                       EmbedFooter?
  image                                        EmbedImage?
  Leaver_Leaver_activeCardToEmbedIdToEmbed     Leaver?      @relation("Leaver_activeCardToEmbedIdToEmbed")
  Welcomer_Welcomer_activeCardToEmbedIdToEmbed Welcomer?    @relation("Welcomer_activeCardToEmbedIdToEmbed")
}

model EmbedImage {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  url       String
  width     Int?
  heigth    Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedAuthor {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  name      String
  iconUrl   String?
  url       String?   @db.VarChar(256)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedField {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?
  name      String
  value     String
  inline    Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model EmbedFooter {
  /// @zod.optional()
  id        Int       @id @default(autoincrement())
  embedId   Int?      @unique
  text      String    @db.VarChar(2048)
  iconUrl   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  embed     Embed?    @relation(fields: [embedId], references: [id], onDelete: Cascade)
}

model ImageCard {
  id                                        Int            @id @default(autoincrement())
  backgroundImgURL                          String?
  backgroundColor                           String?
  avatarBorderColor                         String?
  colorTextDefault                          String?
  createdAt                                 DateTime       @default(now())
  updatedAt                                 DateTime?      @updatedAt
  welcomerId                                String?
  leaverId                                  String?
  mainTextId                                Int?           @unique
  secondTextId                              Int?           @unique
  nicknameTextId                            Int?           @unique
  leaver                                    Leaver?        @relation("LeaverImagesRelation", fields: [leaverId], references: [guildId], onDelete: Cascade, map: "ImageCard_leaverId_fkey")
  mainText                                  ImageCardText? @relation("MainTextRelation", fields: [mainTextId], references: [id], onDelete: Cascade)
  nicknameText                              ImageCardText? @relation("NicknameRelation", fields: [nicknameTextId], references: [id], onDelete: Cascade)
  secondText                                ImageCardText? @relation("SecondTextRelation", fields: [secondTextId], references: [id], onDelete: Cascade)
  welcomer                                  Welcomer?      @relation("WelcomerImagesRelation", fields: [welcomerId], references: [guildId], onDelete: Cascade, map: "ImageCard_welcomerId_fkey")
  Leaver_Leaver_activeCardIdToImageCard     Leaver?        @relation("Leaver_activeCardIdToImageCard")
  Welcomer_Welcomer_activeCardIdToImageCard Welcomer?      @relation("Welcomer_activeCardIdToImageCard")
}

model ImageCardText {
  id           Int        @id @default(autoincrement())
  content      String
  color        String?
  font         String?
  size         Int?
  weight       String?
  mainCard     ImageCard? @relation("MainTextRelation")
  nicknameCard ImageCard? @relation("NicknameRelation")
  secondCard   ImageCard? @relation("SecondTextRelation")
}

model User {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  username  String?
  Session   Session[]
}

model GuildStats {
  id                Int      @default(autoincrement())
  period            Period
  module            Module
  generatedImages   Int      @default(0)
  generatedEmbeds   Int      @default(0)
  generatedMessages Int      @default(0)
  membersEvent      Int      @default(0)
  guildId           String?
  createdAt         DateTime @default(now())

  @@id([id, period, module, createdAt])
}

model betaGuild {
  id        String    @id
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

model Session {
  id          String    @id
  accessToken String
  expiresAt   DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  userId      String
  User        User      @relation(fields: [userId], references: [id])
}

enum Module {
  welcomer
  leaver
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  TOTAL
}
